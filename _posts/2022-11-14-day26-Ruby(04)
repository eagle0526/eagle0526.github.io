---
title: ASTRO Camp Day26 - Ruby
author: YeeChen
date: 2022-11-14
category: Ruby
layout: post
---

Ps. 要再看一次怎麼把環境參數印出來，大約在11/14 11點左右


Rack
------

request -> web server -> rack -> ruby(erb)  
資料庫呢??不是應該要去資料庫拿東西，在丟回瀏覽器??   



Rake的定義是，只要做一個物件，這個物件可以call，並且回傳一個包含三個元素的陣列，三個元素包含  
(1) 網頁狀態(數字)  
(2) HTTP Header(hash)  
(3) HTTP Body(陣列)  
  
Ps. 只要支援call方法就可以，中介軟體也支援rack  
  
  
```md
> run Proc.new { |env|                      -> 用 run 去執行rack
>     [
>         500,                              -> http 狀態
>         {'Content-Type' => 'text/html'},  -> http header (這個也有其他型態'text/jpg/img'之類的)  
>         ['hellos rack']                   -> http body
>     ]
> }
```

### http status 網頁常見狀態
資訊回應 (Informational responses, 100–199),  
成功回應 (Successful responses, 200–299),  
重定向 (Redirects, 300–399),  
用戶端錯誤 (Client errors, 400–499),  
伺服器端錯誤 (Server errors, 500–599).  

> --  
> **301、302的差異**  
> 301會永久轉傳網址，302只是暫時  
> 永久換網址用301  
> 暫時修網站用302  
> --  
{: .block-tip}




### run回傳一個環境變數
環境變數會給一包東西 -> 對方瀏覽器的情況(ip位置、瀏覽器一些資訊......)
```md
> class Cat
>     def call(env)                               -> 這裡可以把一大包環境變數印出來
>         p env
>         [
>             500,
>             {'Content-Type' => 'text/html'},
>             ['hellos rack']
>         ]
>     end
> end
> kitty = Cat.new
> run kitty
```




中介軟體 middleware
------

中介軟體執行時間，是在run 物件開始前，他除了可以當run的入口，也可以當插在入口前的東西 

```md
> class Backdoor
>     def initialize(app, who = "no one")
>         @app = app
>         @who = who
>     end
> 
>     def call(env)
>         status, header, body = @app.call(env)
> 
>         body << "<br /> hacked by #{@app}"
> 
>         [ status, header, body ]
>     end
> end
> 
> 
> use Backdoor, "YeeeeeeeChen"                  -> 執行中介軟體
> 
> 
> run Proc.new { |env|                          -> 入口
>     [
>         500,
>         {'Content-Type' => 'text/html'},
>         ['hellos rack']
>     ]
> }
```



use Backdoor -> 在use的時候，會做下面兩件事，之後初始化的參數，就是下面那個(B)  
Ps. 我最想知道的東西，就是這個，中介變數傳上去的app變數，就是這裡來的  
```md
> B = Backdoor.new(R)
> run B
```



rails 架構
------

1. 瀏覽者的request傳進web server  
2. web server去找路徑  
(1) 有的話就去找相對應controller  
(2) 沒有的話丟一包狀態404的rack給瀏覽者  
3. 設定routes時，會controller會有相對應的action，在controller設定好action  
4. 最後進到action會要你去view頁面找相對應的erb檔案  

```md
>                                             action action ------ >|
>                                               ^    ^              |
>            |            |                     |    |              |
> req --->   | web server | ---> route  ---> Controller -> action   |
>            |            |                                 |       |
>                                                           |       |
>                                                   view <----------
>
>
```

### routes setting

routes寫法 -> get "/about", to: "pages#ab"  
這一行的意思是，進入/about網址後，要去找pages這個controller，並且controller裡面要有ab這個action  

> --  
> 如果使用者request網址，沒有這一條路徑，就會丟404+另外兩個狀態回去，如果有的話，就連到controller  
> ex. /about -> 連到about相關的controller  
> --  


### rails g/d controller
```md
> rails g controller pages   -> 生成一個指定controller檔案
> rails d controller pages   -> 刪除一個指定controller檔案
```


### render html: "hi" 

這樣寫在action上，可以直接產出html的內容(不用連到view頁面)
```md  
> def ab
>     render html: "hi"           -> 這樣畫面可以印出hi
> end
```  


















